import { BookingFormData } from "../_utils/validation-utils";

/**
 * Interface pour la r√©ponse de cr√©ation de r√©servation
 */
export interface BookingApiResponse {
  success: boolean;
  bookingId?: string;
  bookingData?: any;
  error?: string;
  message?: string;
}

/**
 * Interface pour les donn√©es de r√©servation
 */
export interface BookingData {
  id: string;
  establishment_id: string;
  date: string;
  time: string;
  customer_first_name: string;
  customer_last_name: string;
  customer_email: string;
  customer_phone: string;
  number_of_guests: number;
  special_requests: string | null;
  status: string;
  created_at: string;
}

/**
 * Service centralis√© pour la gestion des r√©servations
 * Centralise toutes les op√©rations li√©es aux r√©servations
 */
export class BookingService {
  /**
   * Cr√©e une nouvelle r√©servation
   * @param establishmentId - L'ID de l'√©tablissement
   * @param organizationId - L'ID de l'organisation
   * @param date - La date de r√©servation
   * @param time - L'heure de r√©servation
   * @param formData - Les donn√©es du formulaire
   * @returns La r√©ponse de cr√©ation
   */
  static async create(
    establishmentId: string,
    organizationId: string,
    date: string,
    time: string,
    formData: BookingFormData,
  ): Promise<BookingApiResponse> {
    try {
      console.log("üöÄ Cr√©ation de la r√©servation:", { establishmentId, date, time, formData });

      // Appeler l'API Route pour cr√©er la r√©servation
      const response = await fetch("/api/booking/create", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          establishmentId,
          date,
          time,
          customerFirstName: formData.firstName,
          customerLastName: formData.lastName,
          customerEmail: formData.email,
          customerPhone: formData.phone,
          numberOfGuests: formData.numberOfGuests,
          specialRequests: formData.specialRequests ?? null,
        }),
      });

      const data = await response.json();

      if (!response.ok) {
        console.error("‚ùå Erreur lors de la cr√©ation de la r√©servation:", data.error);
        return { success: false, error: data.error ?? "Erreur lors de la cr√©ation de la r√©servation" };
      }

      console.log("‚úÖ R√©servation cr√©√©e avec succ√®s:", data.bookingData?.id);
      return {
        success: true,
        bookingId: data.bookingData?.id,
        bookingData: data.bookingData,
      };
    } catch (error) {
      console.error("üí• Erreur inattendue lors de la cr√©ation de la r√©servation:", error);
      return { success: false, error: "Erreur inattendue" };
    }
  }

  /**
   * R√©cup√®re une r√©servation par son ID
   * @param bookingId - L'ID de la r√©servation
   * @returns Les donn√©es de r√©servation ou null
   */
  static async getById(bookingId: string): Promise<BookingData | null> {
    try {
      console.log("üîç Recherche de la r√©servation:", bookingId);

      const response = await fetch(`/api/booking/${bookingId}`, {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
        },
      });

      if (!response.ok) {
        console.error("‚ùå Erreur lors de la r√©cup√©ration de la r√©servation:", response.status);
        return null;
      }

      const data = await response.json();

      if (!data.success || !data.booking) {
        return null;
      }

      console.log("‚úÖ R√©servation trouv√©e:", data.booking.id);
      return data.booking as BookingData;
    } catch (error) {
      console.error("üí• Erreur inattendue lors de la r√©cup√©ration de la r√©servation:", error);
      return null;
    }
  }

  /**
   * V√©rifie un token de r√©servation s√©curis√©
   * @param token - Le token s√©curis√©
   * @returns Les donn√©es de r√©servation ou null
   */
  static async verifyToken(token: string): Promise<BookingData | null> {
    try {
      console.log("üîç V√©rification du token:", token);

      const response = await fetch("/api/booking/verify-token", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ token }),
      });

      if (!response.ok) {
        console.error("‚ùå Erreur lors de la v√©rification du token:", response.status);
        return null;
      }

      const data = await response.json();

      if (!data.success || !data.booking) {
        return null;
      }

      console.log("‚úÖ Token v√©rifi√©, r√©servation trouv√©e:", data.booking.id);
      return data.booking as BookingData;
    } catch (error) {
      console.error("üí• Erreur inattendue lors de la v√©rification du token:", error);
      return null;
    }
  }

  /**
   * G√©n√®re un token s√©curis√© pour une r√©servation
   * @param bookingId - L'ID de la r√©servation
   * @param establishmentId - L'ID de l'√©tablissement
   * @returns Le token s√©curis√©
   */
  static generateSecureToken(bookingId: string, establishmentId: string): string {
    const timestamp = Date.now();
    const token = btoa(`${bookingId}:${timestamp}:${establishmentId}`);
    console.log("üîê Token s√©curis√© g√©n√©r√©:", { bookingId, establishmentId, timestamp });
    return token;
  }

  /**
   * Valide un token s√©curis√©
   * @param token - Le token √† valider
   * @returns Les donn√©es d√©cod√©es ou null si invalide
   */
  static validateSecureToken(token: string): { bookingId: string; timestamp: number; establishmentId: string } | null {
    try {
      const decoded = atob(token);
      const [bookingId, timestamp, establishmentId] = decoded.split(":");

      if (!bookingId || !timestamp || !establishmentId) {
        console.error("‚ùå Token invalide: donn√©es manquantes");
        return null;
      }

      const tokenAge = Date.now() - parseInt(timestamp);
      const maxAge = 15 * 60 * 1000; // 15 minutes

      if (tokenAge > maxAge) {
        console.error("‚ùå Token expir√©:", { tokenAge, maxAge });
        return null;
      }

      console.log("‚úÖ Token valide:", { bookingId, establishmentId, tokenAge });
      return { bookingId, timestamp: parseInt(timestamp), establishmentId };
    } catch (error) {
      console.error("‚ùå Erreur lors de la validation du token:", error);
      return null;
    }
  }
}
